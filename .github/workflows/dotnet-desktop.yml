name: Release Nightly Build & Publish

on:
  push:
    branches:
      - master # Trigger on pushes to master
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create releases and push tags
      packages: write # Required if publishing to GitHub Packages as well

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for changelog generation and finding tags

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # --- Determine Nightly Version ---
      - name: Determine Nightly Version
        id: versioning
        run: |
          echo "Determining nightly version..."
          # Get the latest tag that does NOT start with 'nightly-' (our pre-release prefix)
          # This assumes your stable tags are like v1.0.0, v1.2.3, etc.
          latest_stable_tag=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | grep -v '^nightly-' | head -n 1)

          if [ -z "$latest_stable_tag" ]; then
            # No stable tags found, start with a base pre-release version
            base_version="0.1.0"
            echo "No stable tags found. Using base version $base_version for nightly."
          else
            # Remove 'v' prefix if present
            base_version=$(echo "$latest_stable_tag" | sed 's/^v//')
            echo "Latest stable tag found: $latest_stable_tag. Using base version $base_version for nightly."
          fi

          short_sha=$(git rev-parse --short HEAD)
          nightly_version="${base_version}-nightly.${short_sha}"
          # For NuGet, pre-release tags often use dots or hyphens.
          # Ensure the format is valid for NuGet (e.g., 1.0.0-nightly.abc1234 or 1.0.0-nightly-abc1234)
          # GitVersion often produces something like 1.0.0-nightly+SHA, but '+' is not valid in NuGet package part.
          # Let's use a dot for the SHA part for NuGet.
          
          echo "NIGHTLY_VERSION=${nightly_version}" >> $GITHUB_ENV
          echo "BASE_VERSION=${base_version}" >> $GITHUB_ENV # For potential use in release name
          echo "SHORT_SHA=${short_sha}" >> $GITHUB_ENV
          echo "Nightly version determined: $nightly_version"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore -p:Version=${{ env.NIGHTLY_VERSION }}
        # Pass the determined nightly version to the build

      # --- Changelog Generation ---
      - name: Install Changelog Generator (conventional-changelog-cli)
        if: success()
        run: npm install -g conventional-changelog-cli

      - name: Generate Changelog
        id: changelog
        if: success()
        run: |
          echo "Generating changelog..."
          # Use the latest_stable_tag determined earlier for changelog generation
          latest_tag_for_changelog=$(git describe --tags --abbrev=0 2>/dev/null | grep -v '^nightly-' | head -n 1 || echo "")
          echo "Using tag for changelog: $latest_tag_for_changelog"
          changelog_output_file="CHANGELOG_TEMP.md"

          if [ -z "$latest_tag_for_changelog" ]; then
            conventional-changelog -p angular -i $changelog_output_file -s -r 0
          else
            conventional-changelog -p angular -i $changelog_output_file -s --commit-path . --previous-tag $latest_tag_for_changelog
          fi
          
          changelog_content=$(cat $changelog_output_file)
          changelog_content="${changelog_content//'%'/'%25'}"
          changelog_content="${changelog_content//$'\n'/'%0A'}"
          changelog_content="${changelog_content//$'\r'/'%0D'}"
          
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Changelog generated."
          cat $changelog_output_file

      # --- Packaging ---
      - name: Pack NuGet Packages
        run: |
          dotnet pack ./src/ZDK.ResourceManager.Abstractions/ZDK.ResourceManager.Abstractions.csproj --configuration Release --no-build -p:Version=${{ env.NIGHTLY_VERSION }} -o ./nuget-packages
          dotnet pack ./src/ZDK.Localization.Abstractions/ZDK.Localization.Abstractions.csproj --configuration Release --no-build -p:Version=${{ env.NIGHTLY_VERSION }} -o ./nuget-packages
          dotnet pack ./src/ZDK.Localization.Csv/ZDK.Localization.Csv.csproj --configuration Release --no-build -p:Version=${{ env.NIGHTLY_VERSION }} -o ./nuget-packages
          dotnet pack ./src/ZDK.ResourceManager.FileSystem/ZDK.ResourceManager.FileSystem.csproj --configuration Release --no-build -p:Version=${{ env.NIGHTLY_VERSION }} -o ./nuget-packages
          echo "NuGet packages created in ./nuget-packages"
          ls -R ./nuget-packages

      # --- Create Nightly GitHub Release ---
      - name: Create Nightly GitHub Release
        id: create_nightly_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly-${{ env.NIGHTLY_VERSION }} # Tag with the full nightly version
          release_name: Nightly Build - ${{ env.NIGHTLY_VERSION }}
          body: |
            **This is a nightly development build based on version ${{ env.BASE_VERSION }}. Use with caution.**

            **Changelog (since last stable release):**
            ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
          draft: false
          prerelease: true

      # --- Prepare and Upload Release Assets (Zipped Projects) ---
      - name: Create Release Assets Directory
        run: mkdir release-assets

      - name: Zip ZDK.ResourceManager.Abstractions
        run: zip -r ./release-assets/ZDK.ResourceManager.Abstractions-nightly-${{ env.NIGHTLY_VERSION }}.zip ./src/ZDK.ResourceManager.Abstractions
      - name: Zip ZDK.Localization.Abstractions
        run: zip -r ./release-assets/ZDK.Localization.Abstractions-nightly-${{ env.NIGHTLY_VERSION }}.zip ./src/ZDK.Localization.Abstractions
      - name: Zip ZDK.Localization.Csv
        run: zip -r ./release-assets/ZDK.Localization.Csv-nightly-${{ env.NIGHTLY_VERSION }}.zip ./src/ZDK.Localization.Csv
      - name: Zip ZDK.ResourceManager.FileSystem
        run: zip -r ./release-assets/ZDK.ResourceManager.FileSystem-nightly-${{ env.NIGHTLY_VERSION }}.zip ./src/ZDK.ResourceManager.FileSystem

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_nightly_release.outputs.upload_url }}
          asset_path: ./release-assets/*

      # --- Publish to NuGet ---
      - name: Publish NuGet Packages
        run: dotnet nuget push "./nuget-packages/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
